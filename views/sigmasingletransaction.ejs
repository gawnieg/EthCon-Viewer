<html>
<head>
  <script src="../../sigma.min.js"></script>
  <script src="../../sigma.layout.forceAtlas2.min.js"></script>
  <script src="../../sigma.parsers.json.min.js"></script>


</head>
<style>
  #network-graph {
    top: 50;
    bottom: 0;
    left: 0;
    right: 0;
    position: absolute;
    background: black
  }
</style>


<body>
<div id="headr">
<body style="background-color:#000000">
<h1 id = "header1" style="color:white;"> You are visualising a SigmaJS representation of <%=titleTrans%> </h1>
</div>
<br>

<div id = "network-graph"></div>
<script>
function getParameterByName(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
}
var isLabel = getParameterByName('isLabel'); // "lorem"
var startblock = getParameterByName("startblock")
var endblock = getParameterByName("endblock")
if(endblock != undefined){
      var mainheader = document.getElementById("header1")
      var mainheader_text = "You are visualising a SigmaJS representation of transactions in blocks ";
      mainheader_text=mainheader_text.concat(startblock)
      mainheader_text=mainheader_text.concat(" to ")
      mainheader_text=mainheader_text.concat(endblock)
      mainheader.innerHTML =mainheader_text
}
</script>
<script>
//this is working
window.onload=function(){
    console.log("script loaded")
    var sigmaobj = <%- JSON.stringify(sigmaobj_multi) %>
    console.log("sigmaobj is "+JSON.stringify(sigmaobj));
    //dynamically creating divs and then using this to place multiple graphs

    var graphSettings = {
      minNodeSize: 1,
      maxNodeSize: 2,
      // minEdgeSize: 10,
      // maxEdgeSize: 10,
      scalingMode: "inside",
      sideMargin: 10
    }

    var forceConfig = {
      worker: true,
      barnesHutOptimize: true,
      startingIterations: 100,
      // gravity: 5,
      strongGravityMode:true,
      slowDown: 3
    }

    var s = new sigma({
      graph: sigmaobj,
      container: "network-graph",
      settings: graphSettings
    })

    if(isLabel){
      var _labelThreshold = 0;
    }
    else{
      var _labelThreshold = 8;
    }
    s.settings({
      defaultLabelColor:"#ffffff", //f44242
      labelThreshold: _labelThreshold,
      defaultLabelSize: 10           //delete this for no labels,
      // labelSize: "proportional"
    });
    //Start Force Atlas algorithm
    s.startForceAtlas2(forceConfig);
    // setTimeout(function() {
    //   s.stopForceAtlas2();
    // },120000);
  console.log("script finished")
// s = new sigma({
//   graph: sigmaobj,
//   container: "network-graph"
// })
// s.refresh();
// s.startForceAtlas2();


}//onload
</script>





</body>






</html>
