
var MongoClient = require('mongodb').MongoClient
var ObjectID = require('mongodb').ObjectID
var rsvp = require('rsvp')

function makeClone(src) {
  var clone = {}
  for (var k in src) clone[k] = src[k]
  return clone
}

function withoutId(obj) {
  var clone = makeClone(obj)
  delete clone._id
  return clone
}

function formatId(query) {
  var clone = makeClone(query)
  if (clone._id) clone._id = new ObjectID(clone._id)
  return clone
}

var setups = {}

var db = {

  _instance: null,

  setups: setups,

  url: '',

  getDriver: function() {
    return new rsvp.Promise(function(resolve, reject) {
      if (db._instance) return resolve(db._instance)
      if (!db.url) throw "Requires a DB URL to be set first"
      MongoClient.connect(db.url, function(err, db) {
        db._instance = db
        err ? reject(err) : resolve(db)
      })
    })
  },

  getCollection: function(name) {
    return db.getDriver().then(function(db) {
      var queue = setups[name]
      var coll = db.collection(name)
      while (queue[0]) {
        try { queue.pop()(coll) } catch(e) {}
      }
      return coll
    })
  },

  shortcut: function(names) {
    var namesArray = (typeof names === 'string') ? [ names ] : names
    namesArray.forEach(function(name) {
      db[name] = Object.keys(db.collection).reduce(function(memo, key) {
        memo[key] = db.collection[key].bind(null, name)
        return memo
      }, {})
    })
  },

  setup: function(collName, fn) {
    (db.setups[collName] || (db.setups[collName] = [])).push(fn)
  },

  collection: {

    find: function(collName, query, fields, options) {
      return db.getCollection(collName).then(function(c) {
        return new rsvp.Promise(function(res, rej) {
          c.find(query, fields, options).toArray(function(e, a) {
            e ? rej(e) : res(a)
          })
        })
      })
    },

    findOne: function(collName, query) {
      return db.getCollection(collName).then(function(c) {
        return new rsvp.Promise(function(res, rej) {
          c.findOne(formatId(query), function(e, doc) {
            e ? rej(e) : res(doc)
          })
        })
      })
    },

    findById: function(collName, id) {
      return db.getCollection(collName).then(function(c) {
        return new rsvp.Promise(function(res, rej) {
          c.findOne(formatId({ _id: id }), function(e, doc) {
            e ? rej(e) : res(doc)
          })
        })
      })
    },

    insert: function(collName, doc, options) {
      return db.getCollection(collName).then(function(c) {
        return new rsvp.Promise(function(res, rej) {
          c.insert(doc, options, function(e, doc) {
            e ? rej(e) : res(doc)
          })
        })
      })
    },

    findAndModify: function(collName, query, sort, updated, options) {
      return db.getCollection(collName).then(function(c) {
        return new rsvp.Promise(function(res, rej) {
          c.findAndModify(query, sort, updated, options, function(e) {
            e ? rej(e) : res()
          })
        })
      })
    },

    update: function(collName, query, updated, options) {
      return db.getCollection(collName).then(function(c) {
        return new rsvp.Promise(function(res, rej) {
          c.update(formatId(query), withoutId(updated), options, function(e) {
            e ? rej(e) : res(updated) 
          })
        })
      })
    },

    remove: function(collName, query, options) {
      return db.getCollection(collName).then(function(c) {
        return new rsvp.Promise(function(res, rej) {
          c.remove(formatId(query), options, function(e) {
            e ? rej(e) : res() 
          })
        })
      })
    }
  }
}

module.exports = db


